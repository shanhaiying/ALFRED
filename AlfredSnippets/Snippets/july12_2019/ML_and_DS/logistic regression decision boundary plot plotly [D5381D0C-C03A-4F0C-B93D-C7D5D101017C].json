{
  "alfredsnippet" : {
    "snippet" : "def logistic_regression_decision_boundary_plotly(X,Y,clf):\n    \"\"\"Plot decision boundary for logistic regression.\n    \n    Example:\n    iris = sns.load_dataset('iris')\n    X = iris.iloc[:, :2]  # Take only the first two features.\n    y = iris.species\n\n\n    from sklearn.preprocessing import StandardScaler\n    X = StandardScaler().fit_transform(X)\n\n    logistic_regression_decision_boundary_plotly(X,y,clf)\n    \n    Also:\n    clf = sklearn.linear_model.LogisticRegressionCV(cv=5)\n    clf.fit(X, Y.ravel())\n    \n    \"\"\"\n\n    # step size in the mesh\n    h = .02  \n\n    # boundaries\n    x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1\n    y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1\n    \n    # meshgrid\n    xx, yy = np.meshgrid(np.arange(x_min, x_max, h)\n                         , np.arange(y_min, y_max, h))\n    y_ = np.arange(y_min, y_max, h)\n\n    # prediction\n    Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])\n    Z = Z.reshape(xx.shape)\n\n    # traces\n    trace1 = go.Heatmap(x=xx[0], y=y_, z=Z,\n                      colorscale='Viridis',\n                      showscale=True)\n\n    trace2 = go.Scatter(x=X[:, 0], y=X[:, 1], \n                        mode='markers',\n                        showlegend=False,\n                        marker=dict(size=10,\n                                    color=Y, \n                                    colorscale='Viridis',\n                                    line=dict(color='black', width=1))\n                        )\n    layout= go.Layout(\n        autosize= True,\n        title= 'Logistic Regression (C=0.01)',\n        hovermode= 'closest',\n        showlegend= False)\n\n    data = [trace1, trace2]\n    fig = go.Figure(data=data, layout=layout)       \n    return iplot(fig)\n",
    "uid" : "D5381D0C-C03A-4F0C-B93D-C7D5D101017C",
    "name" : "logistic regression decision boundary plot plotly",
    "keyword" : "logistic_regression_decision_boundary_plot_plotly"
  }
}