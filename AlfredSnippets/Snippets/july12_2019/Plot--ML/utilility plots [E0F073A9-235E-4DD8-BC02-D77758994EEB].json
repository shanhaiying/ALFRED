{
  "alfredsnippet" : {
    "snippet" : "def barplot_pd(df1):\n    ax = df1.plot(kind='bar',figsize=(12,8))\n    for p in ax.patches:\n        ax.annotate(np.round(p.get_height(), decimals=2), \n                    (p.get_x()+p.get_width()\/2.,p.get_height()), \n                    ha='center', \n                    va='center', \n                    xytext=(0, 10), \n                    textcoords='offset points')\n\ndef barplot(df,figsize=(12,8), palette=None):\n    \"\"\"\n    Example: \n    df1 = df['c0'].value_counts().nlargest(10)\n    \"\"\"\n    \n    palettes = ['Accent','Accent_r', 'cool_r', 'CMRmap_r','Dark2','Dark2_r',\n            'gist_heat','gist_heat_r','gist_stern','gist_stern_r',\n            'icefire','icefire_r','inferno','inferno_r','magma',\n            'magma_r','mako','mako_r','plasma','plasma_r','PuRd',\n            'PuRd_r','rainbow','rainbow_r','RdPu','RdPu_r','RdYlGn',\n            'RdYlGn_r','Reds','Reds_r','rocket','rocket_r','spring_r',\n            'summer','twilight','twilight_r','viridis','viridis_r']\n\n\n    if palette == None:\n        palette = palettes[np.random.randint(len(palettes))]\n        \n    plt.figure(figsize=figsize)\n    ax = sns.barplot(x=df1.index, y=df1.values, alpha=0.8,palette=palette)\n    plt.ylabel('', fontsize=15)\n    plt.xlabel('', fontsize=12,rotation=90)\n\n    # total counts\n    rects = ax.patches\n    labels = df1.values\n    for rect, label in zip(rects, labels):\n        height = rect.get_height()\n        ax.text(rect.get_x() + rect.get_width()\/2, \n                height* 0.9, label, ha='center', va='bottom')\n        \n    loc, labels = plt.xticks()\n    ax.set_xticklabels(labels, rotation=45)\n    plt.show()\n\ndef pieplot(df1,y,title='',palette='terrain',startangle=90,\n            figsize=(8,8),autopct=\"%1.0f%%\"):\n    df1.plot(kind='pie',\n             y=y,\n             title=title,\n             figsize=figsize,\n             autopct=autopct,\n             shadow=False,\n             startangle=startangle,\n             rotatelabels=True,\n             explode=None,\n             colors=sns.color_palette(palette,len(df1)),\n             wedgeprops={\"linewidth\":2,\"edgecolor\":\"white\"});\n\ndef scatterplot(df,x,y,c,colormap='viridis',figsize=(12,8)):\n    df.plot.scatter(x=x,y=y,c=c,colormap=colormap,figsize=figsize);\n    plt.show()\n\ndef lineplot(df1,x,y,hue):\n    import matplotlib.pyplot as plt\n    import seaborn as sns\n    from matplotlib.ticker import PercentFormatter\n    \n    sns.set_context(\"notebook\", font_scale=1.5, rc={\"lines.linewidth\": 2.5})\n    plt.figure(figsize=(12,8))\n    ax = sns.lineplot(x=x, y=y, hue=hue, data=df1)\n    ax.yaxis.set_major_formatter(PercentFormatter(1.0))\n    plt.show()\n\ndef facetgridplot(df,x,y,hue):\n    (sns.FacetGrid(df,hue=hue,size=8)\n        .map(plt.scatter,x,y));\n    plt.show()\n\ndef lmplot(df,x,y,hue=None):\n    sns.lmplot(data=df,x=x,y=y,lowess=True, aspect=2,hue=hue,\n               line_kws={'color' : 'black'});\n    plt.show()\n\ndef boxplot(df,x,y):\n    sns.boxplot(x=x,y=y,data=df,linewidth=2.5,orient='v',dodge=False)\n    plt.show()\n\ndef stripplot(df,x,y):\n    sns.stripplot(x=x,y=y,data=df,jitter=True,edgecolor='gray',size=8,\n                  palette='winter',orient='v')\n    plt.show()\n\ndef violinplot(df,x,y):\n    sns.violinplot(x=x,y=y,data=df)\n    plt.show()\n\ndef swarmplot(df,x,y):\n    sns.swarmplot(x=x, y=y, data=df)\n    plt.show()\n\ndef box_swarmplot(df,x,y):\n    sns.set(style=\"darkgrid\")\n    fig=plt.gcf()\n    fig.set_size_inches(12,8)\n    fig= sns.boxplot(x=x, y=y, data=df, whis=np.inf)\n    fig= sns.swarmplot(x=x, y=y, data=df, color=\".2\")",
    "uid" : "E0F073A9-235E-4DD8-BC02-D77758994EEB",
    "name" : "utilility plots",
    "keyword" : "utility_plots"
  }
}