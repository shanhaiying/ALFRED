{
  "alfredsnippet" : {
    "snippet" : "def clean_data(data):    \n    \"\"\"\n    Clean the pandas dataframe.\n\n    data: pandas dataframe \n\n    return: cleaned dataframe\n\n\n    1. Make column names lowercase and underscored.\n    2. Rename repeated column names.\n    3. Delete a column is there are a lot of missing values.\n    4. Fill all '' or ' ' by numpy nans in the dataframe.\n    5. Give nice datatype to each columns for > 97% data.\n\n    \"\"\"\n    import pandas as pd\n    import numpy as np\n    import gc\n    \n    \n    # 1. replace ' ' by '_'\n    data.columns = [str(x.lower().strip().replace(' ', '_'))\n                    for x in data.columns]\n    \n    # 2. If colnames are repeated make them columnname_position\n    seen = {}\n    columns = []\n    i = 0\n    for i, x in enumerate(data.columns):\n        if x in seen:\n            columns.append(x+'_{}'.format(i))\n        else:\n            columns.append(x)\n        seen[x] = None\n\n    # 3. Delete a column is there are a lot of missing values\n    for x in data.columns[data.count()\/len(data) < 0.0001]:\n        del data[x]\n    gc.collect()\n    \n    # 4. Fill all '' or ' ' by numpy nans in the dataframe\n    try:\n        data = data.replace({'': np.nan, ' ': np.nan})\n    except:\n        pass\n\n    \n    # 5. Give nice datatype to each columns\n    # e.g. if >97% integers, make them integer.\n    size = len(data)\n    for x in data.columns:\n        ints = pd.to_numeric(data[x], downcast='integer', errors='coerce')\n        \n        # if more than 97% values in a column are integers, set type int.\n        if ints.count()\/size > 0.97:\n            minimum = ints.min()\n            if minimum > 0:\n                data[x] = pd.to_numeric(\n                    data[x], downcast='unsigned', errors='coerce')\n            else:\n                data[x] = pd.to_numeric(\n                    data[x], downcast='integer', errors='coerce')\n        else:\n            floats = pd.to_numeric(\n                data[x], downcast='float', errors='coerce')\n            if floats.count()\/size > 0.97:\n                data[x] = pd.to_numeric(\n                    data[x], downcast='float', errors='coerce')\n            else:\n                dates = pd.to_datetime(data[x], errors='coerce')\n                if dates.count()\/size > 0.97:\n                    data[x] = pd.to_datetime(data[x], errors='coerce')\n    return data.reset_index(drop=True)",
    "uid" : "E28BBE8F-FAC8-4363-A9B2-7B6E47AE1756",
    "name" : "utility data clean",
    "keyword" : "util_data_clean"
  }
}