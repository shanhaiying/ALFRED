{
  "alfredsnippet" : {
    "snippet" : "def get_column_descriptions(df, column_list=None):\n\n    if column_list is None:\n        column_list = df.columns\n    g = df.columns.to_series().groupby(df.dtypes).groups\n    rows_list = []\n    for dtype, dtype_column_list in g.items():\n        for column_name in dtype_column_list:\n            if column_name in column_list:\n                \n                # Get input row in dictionary format; key = col_name\n                row_dict = {}\n                row_dict['column_name'] = column_name\n                row_dict['dtype'] = dtype\n                row_dict['count_blanks'] = df[column_name].isnull().sum()\n                \n                # Count how many unique numbers there are\n                try:\n                    row_dict['count_uniques'] = len(df[column_name].unique())\n                except Exception:\n                    row_dict['count_uniques'] = math.nan\n                \n                # Count how many zeroes the column has\n                try:\n                    row_dict['count_zeroes'] = int((df[column_name] == 0).sum())\n                except Exception:\n                    row_dict['count_zeroes'] = math.nan\n                \n                # Check to see if the column has any dates\n                date_series = pd.to_datetime(df[column_name], errors='coerce')\n                null_series = date_series[~date_series.notnull()]\n                row_dict['has_dates'] = (null_series.shape[0] < date_series.shape[0])\n                \n                # Show whether the column contains only integers\n                try:\n                    row_dict['only_integers'] = (df[column_name].apply(lambda x: float(x).is_integer())).all()\n                except Exception:\n                    row_dict['only_integers'] = float('nan')\n\n                rows_list.append(row_dict)\n\n    ranking_columns = ['column_name', 'dtype', 'count_blanks', 'count_uniques', 'count_zeroes', 'has_dates', 'only_integers']\n    blank_ranking_df = pd.DataFrame(rows_list, columns=ranking_columns)\n    \n    return(blank_ranking_df)",
    "uid" : "F6C141D7-0812-49CF-909D-777D36479405",
    "name" : "get column description",
    "keyword" : "get_column_descriptions"
  }
}