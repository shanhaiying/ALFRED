{
  "alfredsnippet" : {
    "snippet" : "## data slicing\ndf[0] # first COLUMN not row (even if both index and column names are 0's)\ndf['col_0'] # df.col_0 works but df.0 does not work, so,  always use bracket notation.\ndf['a': 'c'] # FAILS  (use: df.loc[:, 'a': 'c'])\ndf.loc[:, df.columns.isin(list('aed'))] # columns are automatically sorted\ndf[['col1','col2']]\ndf[df.columns[2:4]]\ndf.loc[0] # first ROW\ndf.iloc[:, [1,3]]\ndf.loc['row_a':'row_p', 'col_a':'col_c']\ndf.iloc[:, np.r_[0,3,5:8]]\ndf = df.sort_index()  # its good to sort the index, if they are not sorted\n\n## data slicing more advanced\n## NOTE: Use .loc instead of query for data <15k rows.\n## https:\/\/pandas.pydata.org\/pandas-docs\/stable\/indexing.html#indexing-query\ndf.loc[df['IQ'] > 90] # df.query('IQ > 90')\ndf.loc[df['country'].isin(['Nepal','Japan']) # df.query(' [\"Nepal\", \"Japan\"] in country')\ndf.loc[df['country'] == 'Nepal'] # df.query(' country == \"Nepal\" ')\ndf.loc[df['country'].str.contains('United')] # United States, United Kingdom etc.\ndf[(df.a == 1) & (df.b == 4) & ~(df.c == 8)]  # both ~ and not are same in query.\ndf.query(' (a==1) and  (b==4) and (not c == 8)') # both & and and are same in query.\ndf.query('a==1 and  b==4 and not c == 8')\ndf.query(\" c0 < c1 < c2 and c3 != 500 \")\n\n# loc versus query\ndf = pd.DataFrame({'airport1': ['CMH','ORD','PHX','OAK','LAS','CMH','ORD'],\n                   'airport2': ['ORD','PHX','OAK','LAS','CMH','DFW','ATL']})\ndf.query(' (airport1 == \"CMH\" and airport2 == \"ORD\") or\\\n           (airport1 == \"ORD\" and airport2 == \"PHX\")')\ndf.loc[ ((df.airport1 == 'CMH') & (df.airport2 == 'ORD')) |\n        ((df.airport1 == 'ORD') & (df.airport2 == 'PHX')) ]\n\n## select rows for column col1 when string length is 2\ndf.loc[df['col1'].str.len() == 2]\n\n## use loc to assign values, df[mask] = something gives warning.\ndf[df['Affiliation'].str.contains('Harvard')]['Affiliation'] = 'Harvard University' # BAD\ndf.loc[ df['Affiliation'].str.contains('Harvard',case=False), 'Affiliation'] = 'Harvard University' # GOOD\n\n## multiple conditions\ndf['young_male'] = ((df.Sex == 'male') & (df.Age < 30)).map({True: 1, False:0})\n\n## iat\/at are faster than iloc\/loc\ndf.at['index_name']  # faster than df.loc['index_name']\ndf.iat[index_number] # df.iloc[index_number]\ndf.iat[0,2] # faster than df.iloc[0,2]\n\n## faster sub-selection\nrow_num = df.index.get_loc('my_index_name')\ncol_num = df.columns.get_loc('my_column_name')\ndf.iat[row_num,col_num]",
    "uid" : "EE4AC76C-71FC-4BA9-BC2B-0BFD028FDE5F",
    "name" : "pandas selection",
    "keyword" : "pd_selection"
  }
}